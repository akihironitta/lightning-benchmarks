{
    "bench_fit.AnotherBoringBenchmark.peakmem_it": {
        "code": "class AnotherBoringBenchmark:\n    def peakmem_it(self):\n        self.fit_model()",
        "name": "bench_fit.AnotherBoringBenchmark.peakmem_it",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "51d2b971b70e0614ba2a03aaa8253a8adcf9065da046d055cb45271629d702f0"
    },
    "bench_fit.AnotherBoringBenchmark.time_it": {
        "code": "class AnotherBoringBenchmark:\n    def time_it(self):\n        self.fit_model()",
        "min_run_count": 2,
        "name": "bench_fit.AnotherBoringBenchmark.time_it",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a9b4301fe97c678c168593710fafb2544ac4fc39b81f4383efd803d9bb68a004",
        "warmup_time": -1
    },
    "bench_fit.BoringBenchmark.peakmem_it": {
        "code": "class BoringBenchmark:\n    def peakmem_it(self, args):\n        trainer, model, train_data = args\n        trainer.fit(model, train_data)\n\n    def setup_cache(self):\n        train_data = DataLoader(RandomDataset(32, 64), batch_size=2)\n        model = BoringModel()\n        trainer = Trainer(\n            enable_progress_bar=False,\n            enable_model_summary=False,\n            enable_checkpointing=False,\n            max_epochs=20,\n        )\n        return trainer, model, train_data",
        "name": "bench_fit.BoringBenchmark.peakmem_it",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:57",
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "f93666c499a5b308ae4a0a4b593458a6926817641f28dd46ed118a04616237e1"
    },
    "bench_fit.BoringBenchmark.time_it": {
        "code": "class BoringBenchmark:\n    def time_it(self, args):\n        trainer, model, train_data = args\n        trainer.fit(model, train_data)\n\n    def setup_cache(self):\n        train_data = DataLoader(RandomDataset(32, 64), batch_size=2)\n        model = BoringModel()\n        trainer = Trainer(\n            enable_progress_bar=False,\n            enable_model_summary=False,\n            enable_checkpointing=False,\n            max_epochs=20,\n        )\n        return trainer, model, train_data",
        "min_run_count": 2,
        "name": "bench_fit.BoringBenchmark.time_it",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "bench_fit:57",
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "636e5096bd82a5aeacaccf41a9d8d6af02d7574dd397de51dabe6e6105b4ade7",
        "warmup_time": -1
    },
    "bench_fit.CIFARBenchmark.track_last_loss": {
        "code": "class CIFARBenchmark:\n    def track_last_loss(self, output):\n        return np.mean(output[\"losses\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleCIFAR, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.CIFARBenchmark.track_last_loss",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:43",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "9ec4299c31cb33eb45fefd0636f817d170bb798075b670443735c392af505bb0"
    },
    "bench_fit.CIFARBenchmark.track_peakmem": {
        "code": "class CIFARBenchmark:\n    def track_peakmem(self, output):\n        return np.mean(output[\"memory\"]) / 1024  # in KiB\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleCIFAR, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.CIFARBenchmark.track_peakmem",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:43",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "ac4bc4f44d13e9a1c3a4b1191929bd3dfbdb18898378bbb907b8bb146957c3cb"
    },
    "bench_fit.CIFARBenchmark.track_time": {
        "code": "class CIFARBenchmark:\n    def track_time(self, output):\n        return np.mean(output[\"durations\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleCIFAR, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.CIFARBenchmark.track_time",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:43",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "05408fd9bb954c2c79b08bc05454b130be7ffc44cef7cad4a17797c5d8caffa5"
    },
    "bench_fit.MNISTBenchmark.track_last_loss": {
        "code": "class MNISTBenchmark:\n    def track_last_loss(self, output):\n        return np.mean(output[\"losses\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.MNISTBenchmark.track_last_loss",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:13",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "8059181ea7bbfd627a456e914a58b8bbfb5b4b435d73ed4345d3c0d308c08cac"
    },
    "bench_fit.MNISTBenchmark.track_peakmem": {
        "code": "class MNISTBenchmark:\n    def track_peakmem(self, output):\n        return np.mean(output[\"memory\"]) / 1024  # in KiB\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.MNISTBenchmark.track_peakmem",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:13",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "3fa6e48cc224a124f962db8e26ec5005769d81a44efba8b5a10e74983c40a697"
    },
    "bench_fit.MNISTBenchmark.track_time": {
        "code": "class MNISTBenchmark:\n    def track_time(self, output):\n        return np.mean(output[\"durations\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.MNISTBenchmark.track_time",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:13",
        "timeout": 600,
        "type": "track",
        "unit": "unit",
        "version": "611d7f4b206eb34aad315a34a850b490ccecd089c41e0e40c3703c44acb9fe52"
    },
    "bench_fit.RNNBenchmark.track_last_loss": {
        "code": "class RNNBenchmark:\n    def track_last_loss(self, output):\n        return np.mean(output[\"losses\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.RNNBenchmark.track_last_loss",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:27",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "3cb5fbbe5a69140f70d12901a4ea2461d75e58e3618ea387730a737f523bbac0"
    },
    "bench_fit.RNNBenchmark.track_peakmem": {
        "code": "class RNNBenchmark:\n    def track_peakmem(self, output):\n        return np.mean(output[\"memory\"]) / 1024  # in KiB\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.RNNBenchmark.track_peakmem",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:27",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "05d3499cc59629ba86ae1a527b462f1355d07e353c98b4d94ad12890e0a04eb3"
    },
    "bench_fit.RNNBenchmark.track_time": {
        "code": "class RNNBenchmark:\n    def track_time(self, output):\n        return np.mean(output[\"durations\"])\n\n    def setup_cache(self):\n        return measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=4)",
        "name": "bench_fit.RNNBenchmark.track_time",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit:27",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "83a0845cc59054c79ae0dd3e292e9071b2dc127220e2cad1583e16826347ce75"
    },
    "bench_fit_parity.ParityMNISTBenchmark.track_loss_diff": {
        "code": "class ParityMNISTBenchmark:\n    def track_loss_diff(self, outputs):\n        pl_output, pt_output, _ = outputs\n        diff = 0.0\n        for pl_loss, pt_loss in zip(pl_output[\"losses\"], pt_output[\"losses\"]):\n            diff += abs(pl_loss - pt_loss)\n        return diff\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleMNIST, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityMNISTBenchmark.track_loss_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:38",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "0e8700f9ffc33b8d6c244eaf988d9ad0b69b33f93c2688ed1c94ff9e4dbc914e"
    },
    "bench_fit_parity.ParityMNISTBenchmark.track_peakmem_diff": {
        "code": "class ParityMNISTBenchmark:\n    def track_peakmem_diff(self, outputs):\n        pl_output, pt_output, _ = outputs\n        diffs = np.asarray(pl_output[\"memory\"]) - np.mean(pt_output[\"memory\"])\n        # relative to mean reference value\n        diffs = diffs / np.mean(pt_output[\"memory\"])\n        return np.mean(diffs)\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleMNIST, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityMNISTBenchmark.track_peakmem_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:38",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "cf65a697fe764b90c94f6e950ded24c8a0444d43048b28a88621264724be799d"
    },
    "bench_fit_parity.ParityMNISTBenchmark.track_time_diff": {
        "code": "class ParityMNISTBenchmark:\n    def track_time_diff(self, outputs):\n        pl_output, pt_output, num_epochs = outputs\n        # drop the first run for initialize dataset (download & filter)\n        diffs = np.asarray(pl_output[\"durations\"][1:]) - np.mean(pt_output[\"durations\"][1:])\n        diffs = diffs / num_epochs  # norm by event count\n        return np.mean(diffs)\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleMNIST, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleMNIST, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityMNISTBenchmark.track_time_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:38",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "548d172850ba1894b50ce142f6ae2859b0ee124906228fe4be1285309f661c44"
    },
    "bench_fit_parity.ParityRNNBenchmark.track_loss_diff": {
        "code": "class ParityRNNBenchmark:\n    def track_loss_diff(self, outputs):\n        pl_output, pt_output, _ = outputs\n        diff = 0.0\n        for pl_loss, pt_loss in zip(pl_output[\"losses\"], pt_output[\"losses\"]):\n            diff += abs(pl_loss - pt_loss)\n        return diff\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleRNN, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityRNNBenchmark.track_loss_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:8",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "c9c3df12a64fdcd408dbeabd7845ba33c92e907944613d8ce3e8922a65c72a1b"
    },
    "bench_fit_parity.ParityRNNBenchmark.track_peakmem_diff": {
        "code": "class ParityRNNBenchmark:\n    def track_peakmem_diff(self, outputs):\n        pl_output, pt_output, _ = outputs\n        diffs = np.asarray(pl_output[\"memory\"]) - np.mean(pt_output[\"memory\"])\n        # relative to mean reference value\n        diffs = diffs / np.mean(pt_output[\"memory\"])\n        return np.mean(diffs)\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleRNN, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityRNNBenchmark.track_peakmem_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:8",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "ed3d35a91aae5cc060ce2ba0e34fe79b0614eabdcf29a13283290fd02ac128df"
    },
    "bench_fit_parity.ParityRNNBenchmark.track_time_diff": {
        "code": "class ParityRNNBenchmark:\n    def track_time_diff(self, outputs):\n        pl_output, pt_output, num_epochs = outputs\n        # drop the first run for initialize dataset (download & filter)\n        diffs = np.asarray(pl_output[\"durations\"][1:]) - np.mean(pt_output[\"durations\"][1:])\n        diffs = diffs / num_epochs  # norm by event count\n        return np.mean(diffs)\n\n    def setup_cache(self):\n        num_epochs = 4\n        num_runs = 3\n        pl_output = measure_loops(ParityModuleRNN, kind=\"PT Lightning\", num_epochs=num_epochs, num_runs=num_runs)\n        pt_output = measure_loops(ParityModuleRNN, kind=\"Vanilla PT\", num_epochs=num_epochs, num_runs=num_runs)\n        return pl_output, pt_output, num_epochs",
        "name": "bench_fit_parity.ParityRNNBenchmark.track_time_diff",
        "param_names": [],
        "params": [],
        "setup_cache_key": "bench_fit_parity:8",
        "timeout": 60.0,
        "type": "track",
        "unit": "unit",
        "version": "6fc8538ede7f960bbcc29b6d18f78a80cbbcf6874e38facd3af06dd00a1d181e"
    },
    "bench_import.ImportBenchmark.timeraw_pytorch_lightning": {
        "code": "class ImportBenchmark:\n    def timeraw_pytorch_lightning(self):\n        return \"import pytorch_lightning\"",
        "min_run_count": 2,
        "name": "bench_import.ImportBenchmark.timeraw_pytorch_lightning",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "36eea92c1ea6430518668536eb60a0b286736fac148bff8ea64fc0df96427f40",
        "warmup_time": -1
    },
    "bench_instantiation.TrainerInstantiationSuite.time_it": {
        "code": "class TrainerInstantiationSuite:\n    def time_it(self, accelerator):\n        Trainer(accelerator=accelerator, devices=1)\n\n    def setup(self, accelerator):\n        if accelerator == \"gpu\" and not torch.cuda.is_available():\n            raise NotImplementedError",
        "min_run_count": 2,
        "name": "bench_instantiation.TrainerInstantiationSuite.time_it",
        "number": 0,
        "param_names": [
            "accelerator"
        ],
        "params": [
            [
                "'cpu'",
                "'gpu'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dabeba8ea1cc7c8b71ed0de38951c57175d9bfc0b211daeac06abc3b1e04b306",
        "warmup_time": -1
    },
    "version": 2
}